WEBVTT

1
00:00:06.140 --> 00:00:09.225
Welcome to Operators.

2
00:00:09.225 --> 00:00:10.760
After watching this video,

3
00:00:10.760 --> 00:00:12.440
you will be able to define

4
00:00:12.440 --> 00:00:14.665
an operator and
explain its purpose,

5
00:00:14.665 --> 00:00:16.360
show the relation between

6
00:00:16.360 --> 00:00:19.060
custom controllers,
the operator pattern,

7
00:00:19.060 --> 00:00:22.700
and custom resource
definitions or CRDs,

8
00:00:22.700 --> 00:00:26.330
and explain the purpose
of the operator hub,

9
00:00:26.330 --> 00:00:28.170
framework, and maturity model.

10
00:00:28.170 --> 00:00:30.870
Operators automate
cluster tasks and act as

11
00:00:30.870 --> 00:00:34.125
a custom controller to
extend the Kubernetes API.

12
00:00:34.125 --> 00:00:36.770
Operators run in a
pod and interact with

13
00:00:36.770 --> 00:00:39.480
the API server package, deploy,

14
00:00:39.480 --> 00:00:42.015
and manage Kubernetes
applications

15
00:00:42.015 --> 00:00:44.470
and automate app creation,

16
00:00:44.470 --> 00:00:45.910
configuration, and

17
00:00:45.910 --> 00:00:48.850
management via continuous
real-time decisions.

18
00:00:48.850 --> 00:00:50.910
Operators package, deploy,

19
00:00:50.910 --> 00:00:53.410
and manage native
apps in Kubernetes,

20
00:00:53.410 --> 00:00:55.270
automate other tasks, and

21
00:00:55.270 --> 00:00:58.080
ensure all relevant
components are included.

22
00:00:58.080 --> 00:01:01.450
There are human operators
and software operators.

23
00:01:01.450 --> 00:01:04.550
Human operators understand
the system they control.

24
00:01:04.550 --> 00:01:06.530
They know how to
deploy services and

25
00:01:06.530 --> 00:01:08.655
how to recognize
and fix problems.

26
00:01:08.655 --> 00:01:11.450
Software operators try to
capture the knowledge of

27
00:01:11.450 --> 00:01:14.630
human operators and automate
the same processes.

28
00:01:14.630 --> 00:01:17.010
Operators provide ease of

29
00:01:17.010 --> 00:01:19.810
repeatable installation
and upgrade processes,

30
00:01:19.810 --> 00:01:21.710
regular full-system
health checks

31
00:01:21.710 --> 00:01:23.650
of each component in the system,

32
00:01:23.650 --> 00:01:26.310
over-the-air or OTA updates

33
00:01:26.310 --> 00:01:28.810
for components and
software vendors content,

34
00:01:28.810 --> 00:01:30.810
a way to collect and
spread knowledge

35
00:01:30.810 --> 00:01:33.110
from field engineers
to all users,

36
00:01:33.110 --> 00:01:35.870
and integrations with APIs and

37
00:01:35.870 --> 00:01:40.850
CLI tools such as
kubectl and oc commands.

38
00:01:40.850 --> 00:01:44.130
Let's see how service brokers
compare with operators.

39
00:01:44.130 --> 00:01:45.770
Service brokers provide

40
00:01:45.770 --> 00:01:47.730
a short-running
process that cannot

41
00:01:47.730 --> 00:01:51.390
perform the consecutive days
operations such as upgrades,

42
00:01:51.390 --> 00:01:55.330
failover, or scaling,
customizations and parameterization

43
00:01:55.330 --> 00:01:57.080
only at the time of installation

44
00:01:57.080 --> 00:01:59.860
, and off-cluster services.

45
00:01:59.860 --> 00:02:02.800
Operators provide a
long-running process

46
00:02:02.800 --> 00:02:04.260
that can perform operations,

47
00:02:04.260 --> 00:02:07.840
like upgrades, failover,
or scaling every day,

48
00:02:07.840 --> 00:02:10.200
customizations and
parameterizations

49
00:02:10.200 --> 00:02:11.720
as operators constantly

50
00:02:11.720 --> 00:02:12.820
watch the current state of

51
00:02:12.820 --> 00:02:16.380
your cluster, and
off-cluster services.

52
00:02:16.380 --> 00:02:18.400
Custom resource definitions or

53
00:02:18.400 --> 00:02:22.840
CRDs store and retrieve
objects in the Kubernetes API.

54
00:02:22.840 --> 00:02:25.870
CRDs extend Kubernetes
functionality beyond

55
00:02:25.870 --> 00:02:29.220
built-in resources like
deployments and pods.

56
00:02:29.220 --> 00:02:33.155
They make the Kubernetes API
more modular and flexible.

57
00:02:33.155 --> 00:02:35.850
Users can install
CRDs and clusters,

58
00:02:35.850 --> 00:02:37.250
but each CRD is

59
00:02:37.250 --> 00:02:39.870
available only in the
cluster it is installed,

60
00:02:39.870 --> 00:02:41.490
and once installed,

61
00:02:41.490 --> 00:02:44.810
CRD objects are
accessible using kubectl,

62
00:02:44.810 --> 00:02:47.310
similar to pods and
other resources.

63
00:02:47.310 --> 00:02:49.350
To change the state
of a cluster,

64
00:02:49.350 --> 00:02:51.530
custom controllers are used.

65
00:02:51.530 --> 00:02:54.390
Controllers reconcile a
cluster's actual state

66
00:02:54.390 --> 00:02:55.890
with its configured state.

67
00:02:55.890 --> 00:02:58.390
Custom controllers do
the same reconciling

68
00:02:58.390 --> 00:03:00.110
for custom resources.

69
00:03:00.110 --> 00:03:03.010
Combining CRDs and
custom controllers

70
00:03:03.010 --> 00:03:05.355
creates a declarative API.

71
00:03:05.355 --> 00:03:08.980
This combination is known
as the operator pattern.

72
00:03:08.980 --> 00:03:11.880
Custom controllers
interpret CRD data as

73
00:03:11.880 --> 00:03:14.020
the desired state and reconcile

74
00:03:14.020 --> 00:03:17.505
a cluster's actual state
to match the CRD data.

75
00:03:17.505 --> 00:03:19.330
The operate framework is

76
00:03:19.330 --> 00:03:21.730
an open source toolset
that covers coding,

77
00:03:21.730 --> 00:03:25.490
testing, delivery,
and operator updates.

78
00:03:25.490 --> 00:03:29.575
The operator SDK, which
includes helm, go,

79
00:03:29.575 --> 00:03:33.310
and and symbol helps
authors build, test,

80
00:03:33.310 --> 00:03:35.630
and package their
operators without

81
00:03:35.630 --> 00:03:38.895
requiring knowledge of
Kubernetes API complexities.

82
00:03:38.895 --> 00:03:41.260
The operator life
cycle manager or

83
00:03:41.260 --> 00:03:43.680
OLM controls the install,

84
00:03:43.680 --> 00:03:46.530
upgrade, and role-based
access control

85
00:03:46.530 --> 00:03:49.250
or RBAC of operators
in a cluster.

86
00:03:49.250 --> 00:03:52.370
The operator registry
stores CRDs,

87
00:03:52.370 --> 00:03:55.030
cluster service
versions or CSVs,

88
00:03:55.030 --> 00:03:58.090
and operator metadata for
packages and channels.

89
00:03:58.090 --> 00:04:00.990
It runs in Kubernetes
or OpenShift clusters

90
00:04:00.990 --> 00:04:04.090
to provide the operator
catalog data to OLM.

91
00:04:04.090 --> 00:04:06.450
The OperatorHub web console lets

92
00:04:06.450 --> 00:04:08.470
cluster administrators
find operators

93
00:04:08.470 --> 00:04:10.070
to install on their cluster.

94
00:04:10.070 --> 00:04:12.890
The sophistication of
operator management logic

95
00:04:12.890 --> 00:04:14.510
varies depending on the type of

96
00:04:14.510 --> 00:04:16.570
service represented
by the operator.

97
00:04:16.570 --> 00:04:18.530
This operator maturity model

98
00:04:18.530 --> 00:04:21.210
defines the phases of
maturity for general day

99
00:04:21.210 --> 00:04:23.510
to operation
activities and ranges

100
00:04:23.510 --> 00:04:26.095
from basic install
to auto-pilot.

101
00:04:26.095 --> 00:04:29.160
It also shows which activities
are supported by the helm,

102
00:04:29.160 --> 00:04:33.280
go, and and symbol capabilities
of the operator SDK.

103
00:04:33.280 --> 00:04:35.680
Some operator examples include

104
00:04:35.680 --> 00:04:38.500
deploying an application
to the OpenShift cluster.

105
00:04:38.500 --> 00:04:41.420
This can go beyond deployments
to include secrets,

106
00:04:41.420 --> 00:04:44.280
config maps, and
storage resources,

107
00:04:44.280 --> 00:04:46.300
scaling the application
with the help of

108
00:04:46.300 --> 00:04:49.370
multiple replicas based
on the application type,

109
00:04:49.370 --> 00:04:53.050
automation of wrote tasks in
a cluster like taking and

110
00:04:53.050 --> 00:04:55.460
restoring backups of
an application state,

111
00:04:55.460 --> 00:04:57.185
and integration.

112
00:04:57.185 --> 00:04:59.490
Let's consider more
about the first example.

113
00:04:59.490 --> 00:05:01.550
To deploy a whole application,

114
00:05:01.550 --> 00:05:03.895
create a custom
resource for that app

115
00:05:03.895 --> 00:05:06.770
and then a custom
controller for that CRD.

116
00:05:06.770 --> 00:05:08.810
The operator logic
determines how to

117
00:05:08.810 --> 00:05:11.630
reconcile the actual
and configure states.

118
00:05:11.630 --> 00:05:14.710
A CRD requires the
creation of deployments,

119
00:05:14.710 --> 00:05:18.150
services, storage,
and other objects.

120
00:05:18.150 --> 00:05:19.860
The OperatorHub view of

121
00:05:19.860 --> 00:05:21.590
the OpenShift web console

122
00:05:21.590 --> 00:05:24.640
enables operator
installation with one click.

123
00:05:24.640 --> 00:05:27.070
OperatorHub has many
different types

124
00:05:27.070 --> 00:05:28.490
of operators available,

125
00:05:28.490 --> 00:05:31.330
including Red Hat operators,

126
00:05:31.330 --> 00:05:32.890
certified operators from

127
00:05:32.890 --> 00:05:35.770
independent service vendors
partnered with Red Hat,

128
00:05:35.770 --> 00:05:38.760
community operators from
the open source community

129
00:05:38.760 --> 00:05:41.200
but not officially
supported by Red Hat,

130
00:05:41.200 --> 00:05:44.090
and custom operators
defined by users.

131
00:05:44.090 --> 00:05:45.610
You can install many tools from

132
00:05:45.610 --> 00:05:48.615
the Kubernetes ecosystem
via the OperatorHub.

133
00:05:48.615 --> 00:05:51.600
An example is the
Istio service mesh.

134
00:05:51.600 --> 00:05:53.835
In this video, you learn that

135
00:05:53.835 --> 00:05:56.925
CRDs extend the Kubernetes API.

136
00:05:56.925 --> 00:05:59.360
CRDs paired with
custom controllers

137
00:05:59.360 --> 00:06:02.685
create new declarative
APIs in Kubernetes.

138
00:06:02.685 --> 00:06:04.560
Operators use CRDs and

139
00:06:04.560 --> 00:06:07.680
custom controllers to
automate cluster tasks.

140
00:06:07.680 --> 00:06:11.900
The operator framework covers
coding, testing, delivery,

141
00:06:11.900 --> 00:06:15.140
and updates, and the
operator maturity model

142
00:06:15.140 --> 00:06:18.820
defines the phases of
maturity for activities.