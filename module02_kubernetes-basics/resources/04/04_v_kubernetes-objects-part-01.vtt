WEBVTT

1
00:00:06.320 --> 00:00:10.910
Welcome to Kubernetes
Objects part 1.

2
00:00:10.910 --> 00:00:12.800
After watching this video,

3
00:00:12.800 --> 00:00:14.300
you will be able to;

4
00:00:14.300 --> 00:00:17.555
define a Kubernetes object
and its properties,

5
00:00:17.555 --> 00:00:20.920
describe basic Kubernetes
objects and their features,

6
00:00:20.920 --> 00:00:23.440
and demonstrate how Kubernetes

7
00:00:23.440 --> 00:00:25.090
objects relate to each other.

8
00:00:25.090 --> 00:00:27.340
In the real world, an object

9
00:00:27.340 --> 00:00:29.160
is something that
has an identity,

10
00:00:29.160 --> 00:00:31.280
a state, and a behavior.

11
00:00:31.280 --> 00:00:34.880
A window or a shopping cart
are examples of objects.

12
00:00:34.880 --> 00:00:36.860
A software object is a bundle

13
00:00:36.860 --> 00:00:38.760
of data that has an identity,

14
00:00:38.760 --> 00:00:40.840
a state, and a behavior.

15
00:00:40.840 --> 00:00:42.940
Examples include variables,

16
00:00:42.940 --> 00:00:45.840
data structures, and
specific functions.

17
00:00:45.840 --> 00:00:47.940
Another term is entity,

18
00:00:47.940 --> 00:00:51.280
which also has an identity
and associated data.

19
00:00:51.280 --> 00:00:53.400
For example, in banking,

20
00:00:53.400 --> 00:00:55.840
a customer account is an entity.

21
00:00:55.840 --> 00:00:59.460
Finally, the term
persistent means something

22
00:00:59.460 --> 00:01:00.760
will last even if there is

23
00:01:00.760 --> 00:01:03.190
a server failure
or network attack.

24
00:01:03.190 --> 00:01:06.145
An example is
persistent storage.

25
00:01:06.145 --> 00:01:09.730
Kubernetes objects are
persistent entities.

26
00:01:09.730 --> 00:01:13.245
Examples include
pods, namespaces,

27
00:01:13.245 --> 00:01:15.845
replica sets,
deployments, and more.

28
00:01:15.845 --> 00:01:19.150
Kubernetes objects consist
of two main fields,

29
00:01:19.150 --> 00:01:21.370
object spec and status.

30
00:01:21.370 --> 00:01:24.110
The object spec is
provided by the user,

31
00:01:24.110 --> 00:01:26.670
which dictates an
object's desired state.

32
00:01:26.670 --> 00:01:29.545
Status is provided
by Kubernetes.

33
00:01:29.545 --> 00:01:32.310
This describes the current
state of the object.

34
00:01:32.310 --> 00:01:34.290
Kubernetes works
towards matching

35
00:01:34.290 --> 00:01:36.530
the current state to
the desired state.

36
00:01:36.530 --> 00:01:38.325
To work with these objects,

37
00:01:38.325 --> 00:01:40.980
use the Kubernetes
API directly with

38
00:01:40.980 --> 00:01:42.720
the client libraries and

39
00:01:42.720 --> 00:01:45.840
the kubectl command-line
interface or both.

40
00:01:45.840 --> 00:01:49.530
Labels are key value pairs
attached to objects.

41
00:01:49.530 --> 00:01:52.510
They are intended for
identification of objects.

42
00:01:52.510 --> 00:01:54.630
However, a label does not

43
00:01:54.630 --> 00:01:57.050
uniquely identify
a single object.

44
00:01:57.050 --> 00:01:59.650
Many objects can have
the same labels,

45
00:01:59.650 --> 00:02:02.490
and this helps to organize
and group objects.

46
00:02:02.490 --> 00:02:04.330
Label selectors are the core

47
00:02:04.330 --> 00:02:06.300
grouping method in Kubernetes.

48
00:02:06.300 --> 00:02:09.510
They allow you to identify
a set of objects.

49
00:02:09.510 --> 00:02:12.150
Namespaces provide
a mechanism for

50
00:02:12.150 --> 00:02:15.410
isolating groups of resources
within a single cluster.

51
00:02:15.410 --> 00:02:18.070
This is useful when teams
share a cluster for

52
00:02:18.070 --> 00:02:19.910
cost-saving purposes or for

53
00:02:19.910 --> 00:02:22.690
maintaining multiple
projects in isolation.

54
00:02:22.690 --> 00:02:24.770
Namespaces are ideal when

55
00:02:24.770 --> 00:02:27.225
the number of cluster
users is large.

56
00:02:27.225 --> 00:02:30.370
Examples of namespaces
are kube system,

57
00:02:30.370 --> 00:02:32.150
intended for system users and

58
00:02:32.150 --> 00:02:35.560
the default namespace used
to hold user's applications.

59
00:02:35.560 --> 00:02:38.910
There are different patterns
of working with namespaces.

60
00:02:38.910 --> 00:02:40.950
There may be only one namespace

61
00:02:40.950 --> 00:02:42.930
for a user who works
with one team,

62
00:02:42.930 --> 00:02:44.510
which only has one project

63
00:02:44.510 --> 00:02:46.530
that is deployed into a cluster.

64
00:02:46.530 --> 00:02:49.470
Alternatively, there
may be many teams or

65
00:02:49.470 --> 00:02:52.390
projects or a lot of users
with different needs,

66
00:02:52.390 --> 00:02:55.310
where additional
namespaces may be created.

67
00:02:55.310 --> 00:02:58.870
Namespaces provide a scope
for the names of objects.

68
00:02:58.870 --> 00:03:01.250
Each object must
have a unique name

69
00:03:01.250 --> 00:03:03.920
for that resource type
within that namespace.

70
00:03:03.920 --> 00:03:07.170
A pod is the simplest
unit in Kubernetes.

71
00:03:07.170 --> 00:03:09.700
A pod represents a process or

72
00:03:09.700 --> 00:03:10.840
a single instance of an

73
00:03:10.840 --> 00:03:13.180
application running
in the cluster.

74
00:03:13.180 --> 00:03:16.580
A pod usually wraps one
or more containers,

75
00:03:16.580 --> 00:03:18.560
and creating replicas of

76
00:03:18.560 --> 00:03:21.995
a pod serves to scale an
application horizontally.

77
00:03:21.995 --> 00:03:24.160
YAML files are often used

78
00:03:24.160 --> 00:03:26.700
to define the object
that you want to create.

79
00:03:26.700 --> 00:03:30.390
The YAML file shown
defines a simple pod.

80
00:03:30.390 --> 00:03:32.440
The kind field specifies

81
00:03:32.440 --> 00:03:34.440
the kind of object
to be created.

82
00:03:34.440 --> 00:03:36.900
In this case, we create a pod.

83
00:03:36.900 --> 00:03:38.500
The spec field provides

84
00:03:38.500 --> 00:03:40.360
the appropriate fields
for the object to be

85
00:03:40.360 --> 00:03:43.875
created such as the containers
that will run in this pod.

86
00:03:43.875 --> 00:03:47.490
A pod spec must contain
at least one container.

87
00:03:47.490 --> 00:03:51.675
In this example, the
container is named nginx.

88
00:03:51.675 --> 00:03:54.470
The image field dictates
which image will run in

89
00:03:54.470 --> 00:03:56.450
the pod and the ports array

90
00:03:56.450 --> 00:03:59.310
lists the ports that
the container exposes.

91
00:03:59.310 --> 00:04:01.470
A replica set is a set of

92
00:04:01.470 --> 00:04:02.930
identical running replicas of

93
00:04:02.930 --> 00:04:05.470
a pod that are
horizontally scaled.

94
00:04:05.470 --> 00:04:07.750
The configuration
files for a replica

95
00:04:07.750 --> 00:04:10.210
set and a pod are
different from each other.

96
00:04:10.210 --> 00:04:12.990
The replicas field
specifies the number of

97
00:04:12.990 --> 00:04:16.125
replicas that should be
running at any given time.

98
00:04:16.125 --> 00:04:18.220
Whenever this field is updated,

99
00:04:18.220 --> 00:04:20.240
the replica set
creates or deletes

100
00:04:20.240 --> 00:04:23.095
pods to meet the desired
number of replicas.

101
00:04:23.095 --> 00:04:26.440
A pod template is included
in the replica set spec,

102
00:04:26.440 --> 00:04:28.000
which defines the pods that

103
00:04:28.000 --> 00:04:30.335
should be created
by the replica set.

104
00:04:30.335 --> 00:04:32.150
Under the selector field,

105
00:04:32.150 --> 00:04:34.745
the labels supplied in
the match labels field

106
00:04:34.745 --> 00:04:38.310
specify the pods that can be
acquired by the replica set.

107
00:04:38.310 --> 00:04:40.530
Notice that the
label identified in

108
00:04:40.530 --> 00:04:42.430
the match labels
field is the same as

109
00:04:42.430 --> 00:04:44.740
the labels field in
the pod template.

110
00:04:44.740 --> 00:04:47.315
Both are the app nginx.

111
00:04:47.315 --> 00:04:50.810
Creating replica sets
directly is not recommended.

112
00:04:50.810 --> 00:04:53.310
Instead, create a deployment,

113
00:04:53.310 --> 00:04:55.670
which is a higher level
concept that manages

114
00:04:55.670 --> 00:04:59.635
replica sets and offers more
features and better control.

115
00:04:59.635 --> 00:05:02.560
A deployment is a higher
level object that

116
00:05:02.560 --> 00:05:06.140
provides updates for both
pods and replica sets.

117
00:05:06.140 --> 00:05:09.940
Deployments run multiple
replicas of an application using

118
00:05:09.940 --> 00:05:11.340
replica sets and offer

119
00:05:11.340 --> 00:05:13.380
additional management
capabilities on

120
00:05:13.380 --> 00:05:15.360
top of these replica sets.

121
00:05:15.360 --> 00:05:18.740
Deployments are suitable
for stateless applications.

122
00:05:18.740 --> 00:05:23.065
For stateful applications,
stateful sets are used.

123
00:05:23.065 --> 00:05:25.160
Examples of deployments include

124
00:05:25.160 --> 00:05:27.220
the deployment of a
replicated application,

125
00:05:27.220 --> 00:05:29.960
pod updates managed
by a deployment,

126
00:05:29.960 --> 00:05:32.620
or the scaling up
of an application.

127
00:05:32.620 --> 00:05:35.140
This deployment
specification example

128
00:05:35.140 --> 00:05:37.380
shows the kind is deployment,

129
00:05:37.380 --> 00:05:39.700
which defines the
number of replicas,

130
00:05:39.700 --> 00:05:43.140
a selector to identify
which pods can be acquired,

131
00:05:43.140 --> 00:05:44.660
and a pod template.

132
00:05:44.660 --> 00:05:47.340
One key feature provided
by deployments but

133
00:05:47.340 --> 00:05:50.025
not replica sets is
rolling updates.

134
00:05:50.025 --> 00:05:51.890
A rolling update scales up

135
00:05:51.890 --> 00:05:53.810
a new version to the
appropriate number of

136
00:05:53.810 --> 00:05:55.510
replicas and scales down

137
00:05:55.510 --> 00:05:57.810
the old version
to zero replicas.

138
00:05:57.810 --> 00:05:59.730
The replica set ensures that

139
00:05:59.730 --> 00:06:01.770
the appropriate
number of pods exist,

140
00:06:01.770 --> 00:06:03.650
while the deployment
orchestrates

141
00:06:03.650 --> 00:06:05.605
the rollout of a new version.

142
00:06:05.605 --> 00:06:08.430
In this video, you learn that

143
00:06:08.430 --> 00:06:11.690
Kubernetes objects are
persistent entities.

144
00:06:11.690 --> 00:06:15.360
Their main fields are
object spec and status.

145
00:06:15.360 --> 00:06:18.670
Namespaces help in isolating
groups of resources within

146
00:06:18.670 --> 00:06:21.190
a single cluster
and pods represent

147
00:06:21.190 --> 00:06:22.590
a process or an instance of

148
00:06:22.590 --> 00:06:24.450
an app running in the cluster.

149
00:06:24.450 --> 00:06:26.790
Replica sets create and manage

150
00:06:26.790 --> 00:06:29.490
horizontally scaled
running pods and

151
00:06:29.490 --> 00:06:33.950
deployments provide updates
for pods and replica sets.